{"remainingRequest":"/home/runner/work/U1_Macroeconomia/U1_Macroeconomia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Macroeconomia/U1_Macroeconomia/src/views/curso/Tema1.vue?vue&type=template&id=59dbfc69&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Macroeconomia/U1_Macroeconomia/src/views/curso/Tema1.vue","mtime":1756095029305},{"path":"/home/runner/work/U1_Macroeconomia/U1_Macroeconomia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Macroeconomia/U1_Macroeconomia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Macroeconomia/U1_Macroeconomia/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Macroeconomia/U1_Macroeconomia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Macroeconomia/U1_Macroeconomia/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}